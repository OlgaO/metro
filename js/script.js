!function t(e,n,r){function o(s,a){if(!n[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[s]={exports:{}};e[s][0].call(l.exports,function(t){var n=e[s][1][t];return o(n?n:t)},l,l.exports,t,e,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(t,e,n){function r(){l=!1,a.length?c=a.concat(c):f=-1,c.length&&o()}function o(){if(!l){var t=setTimeout(r);l=!0;for(var e=c.length;e;){for(a=c,c=[];++f<e;)a&&a[f].run();f=-1,e=c.length}a=null,l=!1,clearTimeout(t)}}function i(t,e){this.fun=t,this.array=e}function s(){}var a,u=e.exports={},c=[],l=!1,f=-1;u.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new i(t,e)),1!==c.length||l||setTimeout(o,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=s,u.addListener=s,u.once=s,u.off=s,u.removeListener=s,u.removeAllListeners=s,u.emit=s,u.binding=function(t){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(t){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},{}],2:[function(t,e,n){var r=(this&&this.__awaiter||function(t,e,n,r){return new n(function(o,i){function s(t){return t instanceof n&&t.constructor===n?t:new n(function(e){e(t)})}function a(t){try{c("next",t)}catch(e){i(e)}}function u(t){try{c("throw",t)}catch(e){i(e)}}function c(t,e){var n=r[t](e);n.done?o(n.value):s(n.value).then(a,u)}r=r.call(t,e),c("next",void 0)})},window.L),o=function(){function t(t,e){void 0===e&&(e=null),this.layerControl=r.control.UniForm(t,e,{collapsed:!1,position:"topright"})}return t.prototype.addTo=function(t){this.layerControl.addTo(t),this.layerControl.renderUniformControl()},t}();n.LayerControl=o;var i=function(){function t(t){var e=t.getOverlay(),n=t.getMap(),o=new r.Polyline([],{color:"red"});o.addTo(n);var i=new r.CircleMarker([60,30]);e.addEventListener("click",function(t){if(t.shiftKey){var e=n.containerPointToLatLng(new r.Point(t.x,t.y));o.addLatLng(e).redraw(),i.on("mouseout",function(t){return i.closePopup()}),i.addTo(n);var s=o.getLatLngs();if(s.length>1){for(var a=0,u=1;u<s.length;++u)a+=s[u-1].distanceTo(s[u]);r.popup().setLatLng(e).setContent("Popup").openOn(n)}}})}return t}();n.Measurement=i},{}],3:[function(t,e,n){var r=(this&&this.__awaiter||function(t,e,n,r){return new n(function(o,i){function s(t){return t instanceof n&&t.constructor===n?t:new n(function(e){e(t)})}function a(t){try{c("next",t)}catch(e){i(e)}}function u(t){try{c("throw",t)}catch(e){i(e)}}function c(t,e){var n=r[t](e);n.done?o(n.value):s(n.value).then(a,u)}r=r.call(t,e),c("next",void 0)})},t("./metro-map")),o=t("../util");L.Browser.ie?alert("Does not work in IE (yet)"):L.Browser.mobile&&alert("May work incorrectly in mobile browser");var i=t("./polyfills");i["default"]();var s=t("./tilelayers");new r["default"]("map-container","json/graph.json",s["default"]);o.flashTitle(["Plan metro Sankt-Peterburga","Pietarin metron hankesuunnitelma","St Petersburg metro plan proposal"],3e3),console.log("user: "+navigator.userLanguage),console.log("language: "+navigator.language),console.log("browser: "+navigator.browserLanguage),console.log("system: "+navigator.systemLanguage)},{"../util":62,"./metro-map":4,"./polyfills":5,"./tilelayers":7}],4:[function(t,e,n){var r=(this&&this.__awaiter||function(t,e,n,r){return new n(function(o,i){function s(t){return t instanceof n&&t.constructor===n?t:new n(function(e){e(t)})}function a(t){try{c("next",t)}catch(e){i(e)}}function u(t){try{c("throw",t)}catch(e){i(e)}}function c(t,e){var n=r[t](e);n.done?o(n.value):s(n.value).then(a,u)}r=r.call(t,e),c("next",void 0)})},window.L),o=t("./svg"),i=t("../util"),s=t("./addons"),a=function(){function t(t,e,n){var o=this;this.whiskers=[];var a=window.fetch,u=a(e).then(function(t){return t.json()}).then(function(t){return o.graph=t}),c=a("json/hints.json").then(function(t){return t.json()}).then(function(t){return o.hints=t}),l=a("json/data.json").then(function(t){return t.json()}).then(function(t){return o.textData=t});this.map=new r.Map(t,{center:new r.LatLng(59.943556,30.30452),zoom:r.Browser.retina?12:11,minZoom:9,inertia:!1}).addControl(new r.Control.Scale({imperial:!1})),console.log(n[Object.keys(n)[0]][0]),n[Object.keys(n)[0]].addTo(this.map),new s.LayerControl(n).addTo(this.map),console.log("map should be created by now"),this.overlay=document.getElementById("overlay");var f=this.map.getContainer();f.removeChild(this.overlay),f.appendChild(this.overlay),this.addMapListeners(),u["catch"](function(t){return alert(t)}).then(function(t){return o.extendBounds()}).then(function(){return c}).then(function(t){return o.redrawNetwork()}).then(function(){return o.map.invalidateSize(!1)}).then(function(){return o.resetMapView()}).then(function(){return o.fixFontRendering(o.map.getPanes().mapPane)}).then(function(){return l}).then(function(){return document.getElementById("edit-map-button").addEventListener("click",o.editMapClick.bind(o))}),Promise.all([u,c]).then(function(t){return i.verifyHints(o.graph,o.hints)}).then(function(t){return console.log(t)})["catch"](function(t){return console.error(t)})}return t.prototype.getMap=function(){return this.map},t.prototype.getOverlay=function(){return this.overlay},t.prototype.addMapListeners=function(){var t=this,e=this.map.getPanes().mapPane;this.map.on("movestart",function(e){return t.map.touchZoom.disable()}),this.map.on("move",function(n){t.overlay.style.transform=e.style.transform}),this.map.on("moveend",function(n){console.log("move ended"),t.map.touchZoom.enable(),t.fixFontRendering(e)}),this.map.on("zoomstart",function(e){t.map.dragging.disable(),console.log(e),t.overlay.style.opacity="0.5"}),this.map.on("zoomend",function(e){console.log(e),console.log("zoom ended"),t.redrawNetwork(),t.overlay.style.opacity=null,t.map.dragging.enable()})},t.prototype.fixFontRendering=function(t){var e=i.parseTransform(t.style.transform);this.overlay.style.transform=t.style.transform="translate("+e.x+"px, "+e.y+"px)"},t.prototype.resetMapView=function(){this.map.setView(this.bounds.getCenter(),r.Browser.retina?12:11,{pan:{animate:!1},zoom:{animate:!1}})},t.prototype.resetOverlayStructure=function(){for(var t;t=this.overlay.firstChild;)this.overlay.removeChild(t);var e=o.createSVGElement("defs");e.appendChild(o.makeDropShadow()),this.overlay.appendChild(e);var n=o.createSVGElement("g");n.id="origin";for(var r=0,i=["paths-outer","paths-inner","transfers-outer","station-circles","transfers-inner","dummy-circles"];r<i.length;r++){var s=i[r],a=o.createSVGElement("g");a.id=s,n.appendChild(a)}this.overlay.appendChild(n);var u=document.getElementById("station-circles");u.classList.add("station-circle"),n.insertBefore(o.makePlate(),document.getElementById("dummy-circles"))},t.prototype.extendBounds=function(){var t=this,e=this.graph.platforms[0].location;this.bounds=new r.LatLngBounds(e,e),this.graph.platforms.forEach(function(e){return t.bounds.extend(e.location)})},t.prototype.addBindings=function(){var t=this;this.graph.platforms.forEach(function(e,n){var r=document.getElementById("p-"+n),i=document.getElementById("d-"+n),s=e.location;Object.defineProperty(e,"location",{get:function(){return e._location},set:function(s){e._location=s;var a=t.map.getZoom()<12?t.graph.stations[e.station].location:s,u=t.map.latLngToContainerPoint(a).subtract(t.map.latLngToContainerPoint(t.bounds.getNorthWest()));r.setAttribute("cx",u.x.toString()),r.setAttribute("cy",u.y.toString()),i.setAttribute("cx",u.x.toString()),i.setAttribute("cy",u.y.toString()),t.whiskers[n]=t.makeWhiskers(n);for(var c=0,l=e.spans;c<l.length;c++){var f=l[c],p=document.querySelectorAll('[id$="er-'+f+'"]'),h=t.graph.spans[f],d=h.source,m=h.target;e===t.graph.platforms[d]?t.platformsOnSVG[d]=u:t.platformsOnSVG[m]=u;for(var y=[t.platformsOnSVG[d],t.whiskers[d][f],t.whiskers[m][f],t.platformsOnSVG[m]],v=0;v<p.length;++v)o.setBezierPath(p[v],y)}}}),e._location=s})},t.prototype.connectSpanToPlatform=function(t,e){Object.defineProperty(t,"location",{get:function(){return t.location},set:function(t){}})},t.prototype.editMapClick=function(t){var e=this,n=t.target,r=["Edit Map","Save Map"],s=document.getElementById("dummy-circles");if(n.textContent===r[0])s.onmousedown=function(t){if(0===t.button){var n=o.circleByDummy(t.target),r=o.platformByCircle(n,e.graph);e.map.dragging.disable(),e.map.on("mousemove",function(t){return r.location=t.latlng}),e.map.once("mouseup",function(t){return e.map.off("mousemove")})}},s.onclick=function(t){if(3===t.button){var n=o.platformByDummy(t.target,e.graph),r=n.name,s=n.altNames.fi,a=n.altNames.en,u=s?"fi"===i.getUserLanguage()?[s,r]:[r,s]:[r];a&&u.push(a),c=prompt("New name",u.join("|")).split("|"),r=c[0],s=c[1],a=c[2],n.name=r,n.altNames.fi=s,a&&(n.altNames.en=a)}var c},n.textContent=r[1];else{if(n.textContent!==r[1])throw new Error("Incorrect button text");var a=JSON.stringify(this.graph,function(t,e){return t.startsWith("_")?void 0:e});i.downloadAsFile("graph.json",a),s.onmousedown=s.onclick=null,n.textContent=r[0]}},t.prototype.posOnSVG=function(t,e){var n=this.map.latLngToContainerPoint(e);return n.subtract(t.min)},t.prototype.updateOverlayPositioning=function(){var t=this.bounds.getNorthWest(),e=this.bounds.getSouthEast(),n=new r.Bounds(this.map.latLngToContainerPoint(t),this.map.latLngToContainerPoint(e)),o=i.parseTransform(this.overlay.style.transform),s=n.getSize(),a=n.min.subtract(o).subtract(s);this.overlay.style.left=a.x+"px",this.overlay.style.top=a.y+"px";var u=s,c=document.getElementById("origin");c.style.transform="translate("+u.x+"px, "+u.y+"px)";var l=s.multiplyBy(3);this.overlay.style.width=l.x+"px",this.overlay.style.height=l.y+"px"},t.prototype.redrawNetwork=function(){var t=this;this.resetOverlayStructure(),this.updateOverlayPositioning();var e={"station-circles":document.createDocumentFragment(),"dummy-circles":document.createDocumentFragment(),"paths-inner":document.createDocumentFragment(),"paths-outer":document.createDocumentFragment(),"transfers-inner":document.createDocumentFragment(),"transfers-outer":document.createDocumentFragment()},n=document.getElementById("station-plate"),s=this.map.getZoom(),a=this.bounds.getNorthWest(),u=this.bounds.getSouthEast(),c=new r.Bounds(this.map.latLngToContainerPoint(a),this.map.latLngToContainerPoint(u));document.getElementById("edit-map-button").disabled=12>s;var l=12>s?function(e){return t.posOnSVG(c,t.graph.stations[e.station].location)}:function(e){return t.posOnSVG(c,e.location)};this.platformsOnSVG=this.graph.platforms.map(l);var f=.5*(s-7),p=12>s?1.25*f:f,h=12>s?.4*p:.6*p,d=f;r.Browser.retina&&(k=[f,p,h,d].map(function(t){return 1.5*t}),f=k[0],p=k[1],h=k[2],d=k[3]),document.getElementById("station-circles").style.strokeWidth=h+"px";for(var m=new Set,y=0;y<this.graph.stations.length;++y){var v=this.graph.stations[y],g=i.findCircle(this.graph,v),_=[];v.platforms.forEach(function(n){var r=t.graph.platforms[n],i=t.platformsOnSVG[n];if(s>9){var a=o.makeCircle(i,p);if(a.id="p-"+n,s>11){for(var u=new Set,c=0,l=r.spans;c<l.length;c++)for(var f=l[c],h=0,d=t.graph.spans[f].routes;h<d.length;h++){var y=d[h];u.add(t.graph.routes[y].line)}if(1===u.size){var v=u.values().next().value.match(/([MEL])(\d{0,2})/);v&&a.classList.add("M"===v[1]?v[0]:v[1]+"-line")}}var b=o.makeCircle(i,2*p);b.id="d-"+n,b.classList.add("invisible-circle"),b.setAttribute("data-platformId",a.id),e["station-circles"].appendChild(a),e["dummy-circles"].appendChild(b)}t.whiskers[n]=t.makeWhiskers(n),g&&g.indexOf(r)>-1&&(_.push(i),m.add(n))});var b=document.getElementById("dummy-circles");if(b.addEventListener("mouseover",function(e){var n=o.circleByDummy(e.target),r=o.modifyPlate(n,t.graph);r.style.display=null}),b.onmouseout=function(t){return n.style.display="none"},s>11&&g){var x=i.getCircumcenter(_),w=x.distanceTo(_[0]),j=o.makeTransferRing(x,w,d,h);e["transfers-outer"].appendChild(j[0]),e["transfers-inner"].appendChild(j[1])}}s>11&&this.graph.transfers.forEach(function(n){if(!m.has(n.source)||!m.has(n.target)){var r=t.graph.platforms[n.source],i=t.graph.platforms[n.target],s=[t.posOnSVG(c,r.location),t.posOnSVG(c,i.location)],a=o.makeTransfer(s[0],s[1],d,h);e["transfers-outer"].appendChild(a[0]),e["transfers-inner"].appendChild(a[1])}});for(var S=0;S<this.graph.spans.length;++S){var O=this.makePath(S,f);e["paths-outer"].appendChild(O[0]),O.length>1&&e["paths-inner"].appendChild(O[1])}for(var E=0,P=Object.keys(e);E<P.length;E++){var S=P[E];document.getElementById(S).appendChild(e[S])}this.addBindings();var k},t.prototype.makeWhiskers=function(t){var e=this,n=this.graph.platforms[t],r=this.platformsOnSVG[t];if(n.spans.length<2)return G={},G[n.spans[0]]=r,G;if(n.spans.length>2){var o=[[],[]],s=[[],[]],a=this.hints.crossPlatform,u=i.hintContainsLine(this.graph,a,n);if(n.name in a&&null!==u){for(var c=u>-1?a[n.name][u]:a[n.name],l=[],f=0,p=Object.keys(c);f<p.length;f++){var h=p[f],d=c[h];"string"==typeof d?l.push(d):d.forEach(function(t){return l.push(t)})}for(var m=0,y=n.spans;m<y.length;m++){var v=y[m],g=this.graph.spans[v],_=g.source===t?g.target:g.source,b=this.graph.platforms[_],x=this.platformsOnSVG[_],w=l.indexOf(b.name)>-1?1:0;o[w].push(x),s[w].push(v)}}var j=o.map(function(t){return r.add(1===t.length?t[0]:0===t.length?r:i.getCenter(t)).divideBy(2)}),S=j.map(function(t){return r.distanceTo(t)}),O=j[1].subtract(j[0]).multiplyBy(S[0]/(S[0]+S[1])),E=j[0].add(O),P=r.subtract(E),k={};return s[0].forEach(function(t){return k[t]=j[0].add(P)}),s[1].forEach(function(t){return k[t]=j[1].add(P)}),k}var C=n.spans.map(function(t){return e.graph.routes[e.graph.spans[t].routes[0]].line});if(C[0]!==C[1])return V={},V[n.spans[0]]=r,V[n.spans[1]]=r,V;var L=[r,r],A=[0,0],T=this.graph.spans[n.spans[0]];T.source===t&&n.spans.reverse();for(var B=0;2>B;++B){var g=this.graph.spans[n.spans[B]],M=g.source===t?g.target:g.source,I=this.platformsOnSVG[M];A[B]=r.distanceTo(I),L[B]=r.add(I).divideBy(2)}var D=L[1].subtract(L[0]).multiplyBy(A[0]/(A[0]+A[1])),N=L[0].add(D),z=r.subtract(N);return F={},F[n.spans[0]]=L[0].add(z),F[n.spans[1]]=L[1].add(z),F;var G,V,F},t.prototype.makePath=function(t,e){var n=this,r=this.graph.spans[t],i=r.source,s=r.target,a=r.routes.map(function(t){return n.graph.routes[t]}),u=a[0].line.match(/([MEL])(\d{0,2})/),c=o.makeCubicBezier([this.platformsOnSVG[i],this.whiskers[i][t],this.whiskers[s][t],this.platformsOnSVG[s]]);if(c.id="inner-"+t,"E"===u[1]){var l=c.cloneNode(!0);return l.style.strokeWidth=e+"px",c.style.strokeWidth=e/2+"px",l.classList.add("E"),l.id="outer-"+t,c.classList.add("E"),[l,c]}return c.style.strokeWidth=e.toString(),u&&c.classList.add(u[0]),c.classList.add(u[1]+"-line"),"L"===u[1]&&(c.style.strokeWidth=.75*e+"px"),[c]},t}();Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=a},{"../util":62,"./addons":2,"./svg":6}],5:[function(t,e,n){function r(){"Promise"in window&&"then"in Promise.prototype&&"catch"in Promise.prototype||(console.log("promises not present, using a polyfill"),t("es6-promise").polyfill()),"Set"in window&&"add"in Set.prototype&&"has"in Set.prototype||(console.log("set not present, using a polyfill"),t("es6-set/implement")),"classList"in HTMLElement.prototype||(console.log("classlist not present, using a polyfill"),t("classlist-polyfill")),Array.prototype.find||(Array.prototype.find=function(t){if(null==this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),r=n.length>>>0,o=arguments[1],i=0;r>i;i++)if(e=n[i],t.call(o,e,i,n))return e;return void 0})}this&&this.__awaiter||function(t,e,n,r){return new n(function(o,i){function s(t){return t instanceof n&&t.constructor===n?t:new n(function(e){e(t)})}function a(t){try{c("next",t)}catch(e){i(e)}}function u(t){try{c("throw",t)}catch(e){i(e)}}function c(t,e){var n=r[t](e);n.done?o(n.value):s(n.value).then(a,u)}r=r.call(t,e),c("next",void 0)})};Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=r},{"classlist-polyfill":8,"es6-promise":50,"es6-set/implement":51}],6:[function(t,e,n){function r(t,e){var n=l("circle");return n.setAttribute("r",e.toString()),n.setAttribute("cy",t.y.toString()),n.setAttribute("cx",t.x.toString()),n}function o(t){for(var e=t.getAttribute("d").match(/M\s*(.+?),(.+?)\s*C\s*(.+?),(.+?)\s(.+?),(.+?)\s(.+?),(.+?)/),n=e.slice(1).map(function(t){return Number(t)}),r=[],o=0;8>o;o+=2)r.push(new g.Point(n[o],n[o+1]));return r}function i(t,e){if(4!==e.length)throw new Error("there should be 4 points");var n=(l("path"),["M"].concat(e.map(function(t){return t.x+","+t.y})));n.splice(2,0,"C"),t.setAttribute("d",n.join(" "))}function s(t){var e=l("path");return i(e,t),e}function a(t,e){function n(t){for(var n=new Array(t.length-1),r=0;r<n.length;++r)n[0]=t[r].add(t[r+1].subtract(t[r]).multiplyBy(e));return n}var r=new Array(t.length),o=t.slice(0,t.length);do r.push(o[0]),o=n(o);while(o.length>0);return r}function u(t,e,n,o){var i=["transfer-outer","transfer-inner"],s=.5*o;return[n+s,n-s].map(function(n,o){var s=r(t,e);return s.style.strokeWidth=n+"px",s.classList.add(i[o]),s})}function c(t,e,n,r){var o=["transfer-outer","transfer-inner"],i=.5*r;return[n+i,n-i].map(function(n,r){var i=l("line");return i.setAttribute("x1",t.x.toString()),i.setAttribute("y1",t.y.toString()),i.setAttribute("x2",e.x.toString()),i.setAttribute("y2",e.y.toString()),i.style.strokeWidth=n+"px",i.classList.add(o[r]),i})}function l(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function f(){var t=l("filter");return t.id="shadow",t.setAttribute("width","200%"),t.setAttribute("height","200%"),t.innerHTML='\n        <feOffset result="offOut" in="SourceAlpha" dx="0" dy="2" />\n        <feGaussianBlur result="blurOut" in="offOut" stdDeviation="2" />\n        <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />\n    ',t}function p(){var t=l("g");return t.id="station-plate",t.style.display="none",t.innerHTML='<line id="pole" class="plate-pole"/>\n            <g>\n                <rect id="plate-box" class="plate-box" filter="url(#shadow)"/>\n                <text id="plate-text" fill="black" class="plate-text"><tspan/><tspan/><tspan/></text>\n            </g>',t}function h(t){return document.getElementById("p-"+t.id.slice(2))}function d(t,e){return e.platforms[parseInt(t.id.slice(2))]}function m(t,e){return e.platforms[parseInt(t.id.slice(2))]}function y(t,e){var n=document.getElementById("station-plate"),r=new g.Point(Number(t.getAttribute("cx")),Number(t.getAttribute("cy"))),o=Number(t.getAttribute("r")),i=Math.trunc(o),s=n.children[0],a=new g.Point(4+i,8+i),u=r.subtract(a);s.setAttribute("x1",r.x.toString()),s.setAttribute("y1",r.y.toString()),s.setAttribute("x2",u.x.toString()),s.setAttribute("y2",u.y.toString());var c=e.platforms[parseInt(t.id.slice(2))],l=c.name,f=c.altNames.fi,p=c.altNames.en,h=f?"fi"===_.getUserLanguage()?[f,l]:[l,f]:[l];return p&&h.push(p),v(u,h),n}function v(t,e){var n=document.getElementById("plate-box"),r=12,o=e.reduce(function(t,e){return t.length<e.length?e:t}),i=new g.Point(10+6*o.length,6+r*e.length);n.setAttribute("width",i.x.toString()),n.setAttribute("height",i.y.toString());var s=t.subtract(i);n.setAttribute("x",s.x.toString()),n.setAttribute("y",s.y.toString());for(var a=document.getElementById("plate-text"),u=0;u<e.length;++u){var c=t.subtract(new g.Point(3,i.y-(u+1)*r)),l=a.children[u];l.setAttribute("x",c.x.toString()),l.setAttribute("y",c.y.toString()),l.textContent=e[u]}for(;u<a.children.length;)a.children[u++].textContent=null}var g=(this&&this.__awaiter||function(t,e,n,r){return new n(function(o,i){function s(t){return t instanceof n&&t.constructor===n?t:new n(function(e){e(t)})}function a(t){try{c("next",t)}catch(e){i(e)}}function u(t){try{c("throw",t)}catch(e){i(e)}}function c(t,e){var n=r[t](e);n.done?o(n.value):s(n.value).then(a,u)}r=r.call(t,e),c("next",void 0)})},window.L),_=t("../util");n.makeCircle=r,n.getBezierPath=o,n.setBezierPath=i,n.makeCubicBezier=s,n.cutCubicBezier=a,n.makeTransferRing=u,n.makeTransfer=c,n.createSVGElement=l,n.makeDropShadow=f,n.makePlate=p,n.circleByDummy=h,n.platformByCircle=d,n.platformByDummy=m,n.modifyPlate=y},{"../util":62}],7:[function(t,e,n){var r=(this&&this.__awaiter||function(t,e,n,r){return new n(function(o,i){function s(t){return t instanceof n&&t.constructor===n?t:new n(function(e){e(t)})}function a(t){try{c("next",t)}catch(e){i(e)}}function u(t){try{c("throw",t)}catch(e){i(e)}}function c(t,e){var n=r[t](e);n.done?o(n.value):s(n.value).then(a,u)}r=r.call(t,e),c("next",void 0)})},window.L),o={Mapbox:new r.TileLayer("https://{s}.tiles.mapbox.com/v3/inker.mlo91c41/{z}/{x}/{y}.png",{minZoom:9,detectRetina:!0,bounds:null,attribution:'Map data &copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://mapbox.com">Mapbox</a>'}),OpenMapSurfer:new r.TileLayer("http://openmapsurfer.uni-hd.de/tiles/roads/x={x}&y={y}&z={z}",{minZoom:9,detectRetina:!0,attribution:'Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="https://server.ts.openstreetmap.org/copyright">OpenStreetMap</a>'}),HyddaBase:r.tileLayer("http://{s}.tile.openstreetmap.se/hydda/base/{z}/{x}/{y}.png",{minZoom:9,detectRetina:!0,attribution:'Tiles courtesy of <a href="http://openstreetmap.se/" target="_blank">OpenStreetMap Sweden</a> &mdash; Map data &copy; <a href="http://server.ts.openstreetmap.org/copyright">OpenStreetMap</a>'}),EsriGrey:r.tileLayer("http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}",{attribution:"Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ",minZoom:9,detectRetina:!0})};Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=o},{}],8:[function(t,e,n){"document"in window.self&&("classList"in document.createElement("_")?!function(){"use strict";var t=document.createElement("_");if(t.classList.add("c1","c2"),!t.classList.contains("c2")){var e=function(t){var e=DOMTokenList.prototype[t];DOMTokenList.prototype[t]=function(t){var n,r=arguments.length;for(n=0;r>n;n++)t=arguments[n],e.call(this,t)}};e("add"),e("remove")}if(t.classList.toggle("c3",!1),t.classList.contains("c3")){var n=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return 1 in arguments&&!this.contains(t)==!e?e:n.call(this,t)}}t=null}():!function(t){"use strict";if("Element"in t){var e="classList",n="prototype",r=t.Element[n],o=Object,i=String[n].trim||function(){return this.replace(/^\s+|\s+$/g,"")},s=Array[n].indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(e in this&&this[e]===t)return e;return-1},a=function(t,e){this.name=t,this.code=DOMException[t],this.message=e},u=function(t,e){if(""===e)throw new a("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(e))throw new a("INVALID_CHARACTER_ERR","String contains an invalid character");return s.call(t,e)},c=function(t){for(var e=i.call(t.getAttribute("class")||""),n=e?e.split(/\s+/):[],r=0,o=n.length;o>r;r++)this.push(n[r]);this._updateClassName=function(){t.setAttribute("class",this.toString())}},l=c[n]=[],f=function(){return new c(this)};if(a[n]=Error[n],l.item=function(t){return this[t]||null},l.contains=function(t){return t+="",-1!==u(this,t)},l.add=function(){var t,e=arguments,n=0,r=e.length,o=!1;do t=e[n]+"",-1===u(this,t)&&(this.push(t),o=!0);while(++n<r);o&&this._updateClassName()},l.remove=function(){var t,e,n=arguments,r=0,o=n.length,i=!1;do for(t=n[r]+"",e=u(this,t);-1!==e;)this.splice(e,1),i=!0,e=u(this,t);while(++r<o);i&&this._updateClassName()},l.toggle=function(t,e){t+="";var n=this.contains(t),r=n?e!==!0&&"remove":e!==!1&&"add";return r&&this[r](t),e===!0||e===!1?e:!n},l.toString=function(){return this.join(" ")},o.defineProperty){var p={get:f,enumerable:!0,configurable:!0};try{o.defineProperty(r,e,p)}catch(h){-2146823252===h.number&&(p.enumerable=!1,o.defineProperty(r,e,p))}}else o[n].__defineGetter__&&r.__defineGetter__(e,f)}}(window.self))},{}],9:[function(t,e,n){"use strict";var r,o=t("es5-ext/object/copy"),i=t("es5-ext/object/map"),s=t("es5-ext/object/valid-callable"),a=t("es5-ext/object/valid-value"),u=Function.prototype.bind,c=Object.defineProperty,l=Object.prototype.hasOwnProperty;r=function(t,e,n){var r,i=a(e)&&s(e.value);return r=o(e),delete r.writable,delete r.value,r.get=function(){return l.call(this,t)?i:(e.value=u.call(i,null==n?this:this[n]),c(this,t,e),this[t])},r},e.exports=function(t){var e=arguments[1];return i(t,function(t,n){return r(n,t,e)})}},{"es5-ext/object/copy":24,"es5-ext/object/map":32,"es5-ext/object/valid-callable":37,"es5-ext/object/valid-value":38}],10:[function(t,e,n){"use strict";var r,o=t("es5-ext/object/assign"),i=t("es5-ext/object/normalize-options"),s=t("es5-ext/object/is-callable"),a=t("es5-ext/string/#/contains");r=e.exports=function(t,e){var n,r,s,u,c;return arguments.length<2||"string"!=typeof t?(u=e,e=t,t=null):u=arguments[2],null==t?(n=s=!0,r=!1):(n=a.call(t,"c"),r=a.call(t,"e"),s=a.call(t,"w")),c={value:e,configurable:n,enumerable:r,writable:s},u?o(i(u),c):c},r.gs=function(t,e,n){var r,u,c,l;return"string"!=typeof t?(c=n,n=e,e=t,t=null):c=arguments[3],null==e?e=void 0:s(e)?null==n?n=void 0:s(n)||(c=n,n=void 0):(c=e,e=n=void 0),null==t?(r=!0,u=!1):(r=a.call(t,"c"),u=a.call(t,"e")),l={get:e,set:n,configurable:r,enumerable:u},c?o(i(c),l):l}},{"es5-ext/object/assign":21,"es5-ext/object/is-callable":27,"es5-ext/object/normalize-options":33,"es5-ext/string/#/contains":39}],11:[function(t,e,n){"use strict";var r=t("../../object/valid-value");e.exports=function(){return r(this).length=0,this}},{"../../object/valid-value":38}],12:[function(t,e,n){"use strict";var r=t("../../number/to-pos-integer"),o=t("../../object/valid-value"),i=Array.prototype.indexOf,s=Object.prototype.hasOwnProperty,a=Math.abs,u=Math.floor;e.exports=function(t){var e,n,c,l;if(t===t)return i.apply(this,arguments);for(n=r(o(this).length),c=arguments[1],c=isNaN(c)?0:c>=0?u(c):r(this.length)-u(a(c)),e=c;n>e;++e)if(s.call(this,e)&&(l=this[e],l!==l))return e;return-1}},{"../../number/to-pos-integer":19,"../../object/valid-value":38}],13:[function(t,e,n){"use strict";var r=Object.prototype.toString,o=r.call(function(){return arguments}());e.exports=function(t){return r.call(t)===o}},{}],14:[function(t,e,n){"use strict";e.exports=new Function("return this")()},{}],15:[function(t,e,n){"use strict";e.exports=t("./is-implemented")()?Math.sign:t("./shim")},{"./is-implemented":16,"./shim":17}],16:[function(t,e,n){"use strict";e.exports=function(){var t=Math.sign;return"function"!=typeof t?!1:1===t(10)&&-1===t(-20)}},{}],17:[function(t,e,n){"use strict";e.exports=function(t){return t=Number(t),isNaN(t)||0===t?t:t>0?1:-1}},{}],18:[function(t,e,n){"use strict";var r=t("../math/sign"),o=Math.abs,i=Math.floor;e.exports=function(t){return isNaN(t)?0:(t=Number(t),0!==t&&isFinite(t)?r(t)*i(o(t)):t)}},{"../math/sign":15}],19:[function(t,e,n){"use strict";var r=t("./to-integer"),o=Math.max;e.exports=function(t){return o(0,r(t))}},{"./to-integer":18}],20:[function(t,e,n){"use strict";var r=t("./valid-callable"),o=t("./valid-value"),i=Function.prototype.bind,s=Function.prototype.call,a=Object.keys,u=Object.prototype.propertyIsEnumerable;e.exports=function(t,e){return function(n,c){var l,f=arguments[2],p=arguments[3];return n=Object(o(n)),r(c),l=a(n),p&&l.sort("function"==typeof p?i.call(p,n):void 0),"function"!=typeof t&&(t=l[t]),s.call(t,l,function(t,r){return u.call(n,t)?s.call(c,f,n[t],t,n,r):e})}}},{"./valid-callable":37,"./valid-value":38}],21:[function(t,e,n){"use strict";e.exports=t("./is-implemented")()?Object.assign:t("./shim")},{"./is-implemented":22,"./shim":23}],22:[function(t,e,n){"use strict";e.exports=function(){var t,e=Object.assign;return"function"!=typeof e?!1:(t={foo:"raz"},e(t,{bar:"dwa"},{trzy:"trzy"}),t.foo+t.bar+t.trzy==="razdwatrzy")}},{}],23:[function(t,e,n){"use strict";var r=t("../keys"),o=t("../valid-value"),i=Math.max;e.exports=function(t,e){var n,s,a,u=i(arguments.length,2);for(t=Object(o(t)),a=function(r){try{t[r]=e[r]}catch(o){n||(n=o)}},s=1;u>s;++s)e=arguments[s],r(e).forEach(a);if(void 0!==n)throw n;return t}},{"../keys":29,"../valid-value":38}],24:[function(t,e,n){"use strict";var r=t("./assign"),o=t("./valid-value");e.exports=function(t){var e=Object(o(t));return e!==t?e:r({},t)}},{"./assign":21,"./valid-value":38}],25:[function(t,e,n){"use strict";var r,o=Object.create;t("./set-prototype-of/is-implemented")()||(r=t("./set-prototype-of/shim")),e.exports=function(){var t,e,n;return r?1!==r.level?o:(t={},e={},n={configurable:!1,enumerable:!1,writable:!0,value:void 0},Object.getOwnPropertyNames(Object.prototype).forEach(function(t){return"__proto__"===t?void(e[t]={configurable:!0,enumerable:!1,writable:!0,value:void 0}):void(e[t]=n)}),Object.defineProperties(t,e),Object.defineProperty(r,"nullPolyfill",{configurable:!1,enumerable:!1,writable:!1,value:t}),function(e,n){return o(null===e?t:e,n)}):o}()},{"./set-prototype-of/is-implemented":35,"./set-prototype-of/shim":36}],26:[function(t,e,n){"use strict";e.exports=t("./_iterate")("forEach")},{"./_iterate":20}],27:[function(t,e,n){"use strict";e.exports=function(t){return"function"==typeof t}},{}],28:[function(t,e,n){"use strict";var r={"function":!0,object:!0};e.exports=function(t){return null!=t&&r[typeof t]||!1}},{}],29:[function(t,e,n){"use strict";e.exports=t("./is-implemented")()?Object.keys:t("./shim")},{"./is-implemented":30,"./shim":31}],30:[function(t,e,n){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(t){return!1}}},{}],31:[function(t,e,n){"use strict";var r=Object.keys;e.exports=function(t){return r(null==t?t:Object(t))}},{}],32:[function(t,e,n){"use strict";var r=t("./valid-callable"),o=t("./for-each"),i=Function.prototype.call;e.exports=function(t,e){var n={},s=arguments[2];return r(e),o(t,function(t,r,o,a){n[r]=i.call(e,s,t,r,o,a)}),n}},{"./for-each":26,"./valid-callable":37}],33:[function(t,e,n){"use strict";var r=Array.prototype.forEach,o=Object.create,i=function(t,e){var n;for(n in t)e[n]=t[n]};e.exports=function(t){var e=o(null);return r.call(arguments,function(t){null!=t&&i(Object(t),e)}),e}},{}],34:[function(t,e,n){"use strict";e.exports=t("./is-implemented")()?Object.setPrototypeOf:t("./shim")},{"./is-implemented":35,"./shim":36}],35:[function(t,e,n){"use strict";var r=Object.create,o=Object.getPrototypeOf,i={};e.exports=function(){var t=Object.setPrototypeOf,e=arguments[0]||r;return"function"!=typeof t?!1:o(t(e(null),i))===i}},{}],36:[function(t,e,n){"use strict";var r,o=t("../is-object"),i=t("../valid-value"),s=Object.prototype.isPrototypeOf,a=Object.defineProperty,u={configurable:!0,enumerable:!1,writable:!0,value:void 0};r=function(t,e){if(i(t),null===e||o(e))return t;throw new TypeError("Prototype must be null or an object")},e.exports=function(t){var e,n;return t?(2===t.level?t.set?(n=t.set,e=function(t,e){return n.call(r(t,e),e),t}):e=function(t,e){return r(t,e).__proto__=e,t}:e=function o(t,e){var n;return r(t,e),n=s.call(o.nullPolyfill,t),n&&delete o.nullPolyfill.__proto__,null===e&&(e=o.nullPolyfill),t.__proto__=e,n&&a(o.nullPolyfill,"__proto__",u),t},Object.defineProperty(e,"level",{configurable:!1,enumerable:!1,writable:!1,value:t.level})):null}(function(){var t,e=Object.create(null),n={},r=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__");if(r){try{t=r.set,t.call(e,n)}catch(o){}if(Object.getPrototypeOf(e)===n)return{set:t,level:2}}return e.__proto__=n,Object.getPrototypeOf(e)===n?{level:2}:(e={},e.__proto__=n,Object.getPrototypeOf(e)===n?{level:1}:!1)}()),t("../create");
},{"../create":25,"../is-object":28,"../valid-value":38}],37:[function(t,e,n){"use strict";e.exports=function(t){if("function"!=typeof t)throw new TypeError(t+" is not a function");return t}},{}],38:[function(t,e,n){"use strict";e.exports=function(t){if(null==t)throw new TypeError("Cannot use null or undefined");return t}},{}],39:[function(t,e,n){"use strict";e.exports=t("./is-implemented")()?String.prototype.contains:t("./shim")},{"./is-implemented":40,"./shim":41}],40:[function(t,e,n){"use strict";var r="razdwatrzy";e.exports=function(){return"function"!=typeof r.contains?!1:r.contains("dwa")===!0&&r.contains("foo")===!1}},{}],41:[function(t,e,n){"use strict";var r=String.prototype.indexOf;e.exports=function(t){return r.call(this,t,arguments[1])>-1}},{}],42:[function(t,e,n){"use strict";var r=Object.prototype.toString,o=r.call("");e.exports=function(t){return"string"==typeof t||t&&"object"==typeof t&&(t instanceof String||r.call(t)===o)||!1}},{}],43:[function(t,e,n){"use strict";var r,o=t("es5-ext/object/set-prototype-of"),i=t("es5-ext/string/#/contains"),s=t("d"),a=t("./"),u=Object.defineProperty;r=e.exports=function(t,e){return this instanceof r?(a.call(this,t),e=e?i.call(e,"key+value")?"key+value":i.call(e,"key")?"key":"value":"value",void u(this,"__kind__",s("",e))):new r(t,e)},o&&o(r,a),r.prototype=Object.create(a.prototype,{constructor:s(r),_resolve:s(function(t){return"value"===this.__kind__?this.__list__[t]:"key+value"===this.__kind__?[t,this.__list__[t]]:t}),toString:s(function(){return"[object Array Iterator]"})})},{"./":46,d:10,"es5-ext/object/set-prototype-of":34,"es5-ext/string/#/contains":39}],44:[function(t,e,n){"use strict";var r=t("es5-ext/function/is-arguments"),o=t("es5-ext/object/valid-callable"),i=t("es5-ext/string/is-string"),s=t("./get"),a=Array.isArray,u=Function.prototype.call,c=Array.prototype.some;e.exports=function(t,e){var n,l,f,p,h,d,m,y,v=arguments[2];if(a(t)||r(t)?n="array":i(t)?n="string":t=s(t),o(e),f=function(){p=!0},"array"===n)return void c.call(t,function(t){return u.call(e,v,t,f),p?!0:void 0});if("string"!==n)for(l=t.next();!l.done;){if(u.call(e,v,l.value,f),p)return;l=t.next()}else for(d=t.length,h=0;d>h&&(m=t[h],d>h+1&&(y=m.charCodeAt(0),y>=55296&&56319>=y&&(m+=t[++h])),u.call(e,v,m,f),!p);++h);}},{"./get":45,"es5-ext/function/is-arguments":13,"es5-ext/object/valid-callable":37,"es5-ext/string/is-string":42}],45:[function(t,e,n){"use strict";var r=t("es5-ext/function/is-arguments"),o=t("es5-ext/string/is-string"),i=t("./array"),s=t("./string"),a=t("./valid-iterable"),u=t("es6-symbol").iterator;e.exports=function(t){return"function"==typeof a(t)[u]?t[u]():r(t)?new i(t):o(t)?new s(t):new i(t)}},{"./array":43,"./string":48,"./valid-iterable":49,"es5-ext/function/is-arguments":13,"es5-ext/string/is-string":42,"es6-symbol":56}],46:[function(t,e,n){"use strict";var r,o=t("es5-ext/array/#/clear"),i=t("es5-ext/object/assign"),s=t("es5-ext/object/valid-callable"),a=t("es5-ext/object/valid-value"),u=t("d"),c=t("d/auto-bind"),l=t("es6-symbol"),f=Object.defineProperty,p=Object.defineProperties;e.exports=r=function(t,e){return this instanceof r?(p(this,{__list__:u("w",a(t)),__context__:u("w",e),__nextIndex__:u("w",0)}),void(e&&(s(e.on),e.on("_add",this._onAdd),e.on("_delete",this._onDelete),e.on("_clear",this._onClear)))):new r(t,e)},p(r.prototype,i({constructor:u(r),_next:u(function(){var t;if(this.__list__)return this.__redo__&&(t=this.__redo__.shift(),void 0!==t)?t:this.__nextIndex__<this.__list__.length?this.__nextIndex__++:void this._unBind()}),next:u(function(){return this._createResult(this._next())}),_createResult:u(function(t){return void 0===t?{done:!0,value:void 0}:{done:!1,value:this._resolve(t)}}),_resolve:u(function(t){return this.__list__[t]}),_unBind:u(function(){this.__list__=null,delete this.__redo__,this.__context__&&(this.__context__.off("_add",this._onAdd),this.__context__.off("_delete",this._onDelete),this.__context__.off("_clear",this._onClear),this.__context__=null)}),toString:u(function(){return"[object Iterator]"})},c({_onAdd:u(function(t){if(!(t>=this.__nextIndex__)){if(++this.__nextIndex__,!this.__redo__)return void f(this,"__redo__",u("c",[t]));this.__redo__.forEach(function(e,n){e>=t&&(this.__redo__[n]=++e)},this),this.__redo__.push(t)}}),_onDelete:u(function(t){var e;t>=this.__nextIndex__||(--this.__nextIndex__,this.__redo__&&(e=this.__redo__.indexOf(t),-1!==e&&this.__redo__.splice(e,1),this.__redo__.forEach(function(e,n){e>t&&(this.__redo__[n]=--e)},this)))}),_onClear:u(function(){this.__redo__&&o.call(this.__redo__),this.__nextIndex__=0})}))),f(r.prototype,l.iterator,u(function(){return this})),f(r.prototype,l.toStringTag,u("","Iterator"))},{d:10,"d/auto-bind":9,"es5-ext/array/#/clear":11,"es5-ext/object/assign":21,"es5-ext/object/valid-callable":37,"es5-ext/object/valid-value":38,"es6-symbol":56}],47:[function(t,e,n){"use strict";var r=t("es5-ext/function/is-arguments"),o=t("es5-ext/string/is-string"),i=t("es6-symbol").iterator,s=Array.isArray;e.exports=function(t){return null==t?!1:s(t)?!0:o(t)?!0:r(t)?!0:"function"==typeof t[i]}},{"es5-ext/function/is-arguments":13,"es5-ext/string/is-string":42,"es6-symbol":56}],48:[function(t,e,n){"use strict";var r,o=t("es5-ext/object/set-prototype-of"),i=t("d"),s=t("./"),a=Object.defineProperty;r=e.exports=function(t){return this instanceof r?(t=String(t),s.call(this,t),void a(this,"__length__",i("",t.length))):new r(t)},o&&o(r,s),r.prototype=Object.create(s.prototype,{constructor:i(r),_next:i(function(){return this.__list__?this.__nextIndex__<this.__length__?this.__nextIndex__++:void this._unBind():void 0}),_resolve:i(function(t){var e,n=this.__list__[t];return this.__nextIndex__===this.__length__?n:(e=n.charCodeAt(0),e>=55296&&56319>=e?n+this.__list__[this.__nextIndex__++]:n)}),toString:i(function(){return"[object String Iterator]"})})},{"./":46,d:10,"es5-ext/object/set-prototype-of":34}],49:[function(t,e,n){"use strict";var r=t("./is-iterable");e.exports=function(t){if(!r(t))throw new TypeError(t+" is not iterable");return t}},{"./is-iterable":47}],50:[function(t,e,n){(function(n,r){(function(){"use strict";function o(t){return"function"==typeof t||"object"==typeof t&&null!==t}function i(t){return"function"==typeof t}function s(t){return"object"==typeof t&&null!==t}function a(t){Z=t}function u(t){K=t}function c(){return function(){n.nextTick(d)}}function l(){return function(){U(d)}}function f(){var t=0,e=new Q(d),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function p(){var t=new MessageChannel;return t.port1.onmessage=d,function(){t.port2.postMessage(0)}}function h(){return function(){setTimeout(d,1)}}function d(){for(var t=0;Y>t;t+=2){var e=et[t],n=et[t+1];e(n),et[t]=void 0,et[t+1]=void 0}Y=0}function m(){try{var e=t,n=e("vertx");return U=n.runOnLoop||n.runOnContext,l()}catch(r){return h()}}function y(){}function v(){return new TypeError("You cannot resolve a promise with itself")}function g(){return new TypeError("A promises callback cannot return that same promise.")}function _(t){try{return t.then}catch(e){return it.error=e,it}}function b(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function x(t,e,n){K(function(t){var r=!1,o=b(n,e,function(n){r||(r=!0,e!==n?S(t,n):E(t,n))},function(e){r||(r=!0,P(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,P(t,o))},t)}function w(t,e){e._state===rt?E(t,e._result):e._state===ot?P(t,e._result):k(e,void 0,function(e){S(t,e)},function(e){P(t,e)})}function j(t,e){if(e.constructor===t.constructor)w(t,e);else{var n=_(e);n===it?P(t,it.error):void 0===n?E(t,e):i(n)?x(t,e,n):E(t,e)}}function S(t,e){t===e?P(t,v()):o(e)?j(t,e):E(t,e)}function O(t){t._onerror&&t._onerror(t._result),C(t)}function E(t,e){t._state===nt&&(t._result=e,t._state=rt,0!==t._subscribers.length&&K(C,t))}function P(t,e){t._state===nt&&(t._state=ot,t._result=e,K(O,t))}function k(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+rt]=n,o[i+ot]=r,0===i&&t._state&&K(C,t)}function C(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?T(n,r,o,i):o(i);t._subscribers.length=0}}function L(){this.error=null}function A(t,e){try{return t(e)}catch(n){return st.error=n,st}}function T(t,e,n,r){var o,s,a,u,c=i(n);if(c){if(o=A(n,r),o===st?(u=!0,s=o.error,o=null):a=!0,e===o)return void P(e,g())}else o=r,a=!0;e._state!==nt||(c&&a?S(e,o):u?P(e,s):t===rt?E(e,o):t===ot&&P(e,o))}function B(t,e){try{e(function(e){S(t,e)},function(e){P(t,e)})}catch(n){P(t,n)}}function M(t,e){var n=this;n._instanceConstructor=t,n.promise=new t(y),n._validateInput(e)?(n._input=e,n.length=e.length,n._remaining=e.length,n._init(),0===n.length?E(n.promise,n._result):(n.length=n.length||0,n._enumerate(),0===n._remaining&&E(n.promise,n._result))):P(n.promise,n._validationError())}function I(t){return new at(this,t).promise}function D(t){function e(t){S(o,t)}function n(t){P(o,t)}var r=this,o=new r(y);if(!q(t))return P(o,new TypeError("You must pass an array to race.")),o;for(var i=t.length,s=0;o._state===nt&&i>s;s++)k(r.resolve(t[s]),void 0,e,n);return o}function N(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(y);return S(n,t),n}function z(t){var e=this,n=new e(y);return P(n,t),n}function G(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function V(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function F(t){this._id=pt++,this._state=void 0,this._result=void 0,this._subscribers=[],y!==t&&(i(t)||G(),this instanceof F||V(),B(this,t))}function R(){var t;if("undefined"!=typeof r)t=r;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;(!n||"[object Promise]"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(t.Promise=ht)}var W;W=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var U,Z,H,q=W,Y=0,K=({}.toString,function(t,e){et[Y]=t,et[Y+1]=e,Y+=2,2===Y&&(Z?Z(d):H())}),$="undefined"!=typeof window?window:void 0,J=$||{},Q=J.MutationObserver||J.WebKitMutationObserver,X="undefined"!=typeof n&&"[object process]"==={}.toString.call(n),tt="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,et=new Array(1e3);H=X?c():Q?f():tt?p():void 0===$&&"function"==typeof t?m():h();var nt=void 0,rt=1,ot=2,it=new L,st=new L;M.prototype._validateInput=function(t){return q(t)},M.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},M.prototype._init=function(){this._result=new Array(this.length)};var at=M;M.prototype._enumerate=function(){for(var t=this,e=t.length,n=t.promise,r=t._input,o=0;n._state===nt&&e>o;o++)t._eachEntry(r[o],o)},M.prototype._eachEntry=function(t,e){var n=this,r=n._instanceConstructor;s(t)?t.constructor===r&&t._state!==nt?(t._onerror=null,n._settledAt(t._state,e,t._result)):n._willSettleAt(r.resolve(t),e):(n._remaining--,n._result[e]=t)},M.prototype._settledAt=function(t,e,n){var r=this,o=r.promise;o._state===nt&&(r._remaining--,t===ot?P(o,n):r._result[e]=n),0===r._remaining&&E(o,r._result)},M.prototype._willSettleAt=function(t,e){var n=this;k(t,void 0,function(t){n._settledAt(rt,e,t)},function(t){n._settledAt(ot,e,t)})};var ut=I,ct=D,lt=N,ft=z,pt=0,ht=F;F.all=ut,F.race=ct,F.resolve=lt,F.reject=ft,F._setScheduler=a,F._setAsap=u,F._asap=K,F.prototype={constructor:F,then:function(t,e){var n=this,r=n._state;if(r===rt&&!t||r===ot&&!e)return this;var o=new this.constructor(y),i=n._result;if(r){var s=arguments[r-1];K(function(){T(r,o,s,i)})}else k(n,o,t,e);return o},"catch":function(t){return this.then(null,t)}};var dt=R,mt={Promise:ht,polyfill:dt};"function"==typeof define&&define.amd?define(function(){return mt}):"undefined"!=typeof e&&e.exports?e.exports=mt:"undefined"!=typeof this&&(this.ES6Promise=mt),dt()}).call(this)}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:1}],51:[function(t,e,n){"use strict";t("./is-implemented")()||Object.defineProperty(t("es5-ext/global"),"Set",{value:t("./polyfill"),configurable:!0,enumerable:!1,writable:!0})},{"./is-implemented":52,"./polyfill":55,"es5-ext/global":14}],52:[function(t,e,n){"use strict";e.exports=function(){var t,e,n;return"function"!=typeof Set?!1:"[object Set]"!==String(Set.prototype)?!1:(t=new Set(["raz","dwa","trzy"]),3!==t.size?!1:"function"!=typeof t.add?!1:"function"!=typeof t.clear?!1:"function"!=typeof t["delete"]?!1:"function"!=typeof t.entries?!1:"function"!=typeof t.forEach?!1:"function"!=typeof t.has?!1:"function"!=typeof t.keys?!1:"function"!=typeof t.values?!1:(e=t.values(),n=e.next(),n.done!==!1?!1:"raz"!==n.value?!1:!0))}},{}],53:[function(t,e,n){"use strict";e.exports=function(){return"undefined"==typeof Set?!1:"[object Set]"===Object.prototype.toString.call(Set.prototype)}()},{}],54:[function(t,e,n){"use strict";var r,o=t("es5-ext/object/set-prototype-of"),i=t("es5-ext/string/#/contains"),s=t("d"),a=t("es6-iterator"),u=t("es6-symbol").toStringTag,c=Object.defineProperty;r=e.exports=function(t,e){return this instanceof r?(a.call(this,t.__setData__,t),e=e&&i.call(e,"key+value")?"key+value":"value",void c(this,"__kind__",s("",e))):new r(t,e)},o&&o(r,a),r.prototype=Object.create(a.prototype,{constructor:s(r),_resolve:s(function(t){return"value"===this.__kind__?this.__list__[t]:[this.__list__[t],this.__list__[t]]}),toString:s(function(){return"[object Set Iterator]"})}),c(r.prototype,u,s("c","Set Iterator"))},{d:10,"es5-ext/object/set-prototype-of":34,"es5-ext/string/#/contains":39,"es6-iterator":46,"es6-symbol":56}],55:[function(t,e,n){"use strict";var r,o,i=t("es5-ext/array/#/clear"),s=t("es5-ext/array/#/e-index-of"),a=t("es5-ext/object/set-prototype-of"),u=t("es5-ext/object/valid-callable"),c=t("d"),l=t("event-emitter"),f=t("es6-symbol"),p=t("es6-iterator/valid-iterable"),h=t("es6-iterator/for-of"),d=t("./lib/iterator"),m=t("./is-native-implemented"),y=Function.prototype.call,v=Object.defineProperty,g=Object.getPrototypeOf;e.exports=r=function(){var t,e=arguments[0];if(!(this instanceof r))throw new TypeError("Constructor requires 'new'");return t=m&&a?a(new Set,g(this)):this,null!=e&&p(e),v(t,"__setData__",c("c",[])),e?(h(e,function(t){-1===s.call(this,t)&&this.push(t)},t.__setData__),t):t},m&&(a&&a(r,Set),r.prototype=Object.create(Set.prototype,{constructor:c(r)})),l(Object.defineProperties(r.prototype,{add:c(function(t){return this.has(t)?this:(this.emit("_add",this.__setData__.push(t)-1,t),this)}),clear:c(function(){this.__setData__.length&&(i.call(this.__setData__),this.emit("_clear"))}),"delete":c(function(t){var e=s.call(this.__setData__,t);return-1===e?!1:(this.__setData__.splice(e,1),this.emit("_delete",e,t),!0)}),entries:c(function(){return new d(this,"key+value")}),forEach:c(function(t){var e,n,r,o=arguments[1];for(u(t),e=this.values(),n=e._next();void 0!==n;)r=e._resolve(n),y.call(t,o,r,r,this),n=e._next()}),has:c(function(t){return-1!==s.call(this.__setData__,t)}),keys:c(o=function(){return this.values()}),size:c.gs(function(){return this.__setData__.length}),values:c(function(){return new d(this)}),toString:c(function(){return"[object Set]"})})),v(r.prototype,f.iterator,c(o)),v(r.prototype,f.toStringTag,c("c","Set"))},{"./is-native-implemented":53,"./lib/iterator":54,d:10,"es5-ext/array/#/clear":11,"es5-ext/array/#/e-index-of":12,"es5-ext/object/set-prototype-of":34,"es5-ext/object/valid-callable":37,"es6-iterator/for-of":44,"es6-iterator/valid-iterable":49,"es6-symbol":56,"event-emitter":61}],56:[function(t,e,n){"use strict";e.exports=t("./is-implemented")()?Symbol:t("./polyfill")},{"./is-implemented":57,"./polyfill":59}],57:[function(t,e,n){"use strict";e.exports=function(){var t;if("function"!=typeof Symbol)return!1;t=Symbol("test symbol");try{String(t)}catch(e){return!1}return"symbol"==typeof Symbol.iterator?!0:"object"!=typeof Symbol.isConcatSpreadable?!1:"object"!=typeof Symbol.iterator?!1:"object"!=typeof Symbol.toPrimitive?!1:"object"!=typeof Symbol.toStringTag?!1:"object"!=typeof Symbol.unscopables?!1:!0}},{}],58:[function(t,e,n){"use strict";e.exports=function(t){return t&&("symbol"==typeof t||"Symbol"===t["@@toStringTag"])||!1}},{}],59:[function(t,e,n){"use strict";var r,o,i,s=t("d"),a=t("./validate-symbol"),u=Object.create,c=Object.defineProperties,l=Object.defineProperty,f=Object.prototype,p=u(null);"function"==typeof Symbol&&(r=Symbol);var h=function(){var t=u(null);return function(e){for(var n,r,o=0;t[e+(o||"")];)++o;return e+=o||"",t[e]=!0,n="@@"+e,l(f,n,s.gs(null,function(t){r||(r=!0,l(this,n,s(t)),r=!1)})),n}}();i=function(t){if(this instanceof i)throw new TypeError("TypeError: Symbol is not a constructor");return o(t)},e.exports=o=function d(t){var e;if(this instanceof d)throw new TypeError("TypeError: Symbol is not a constructor");return e=u(i.prototype),t=void 0===t?"":String(t),c(e,{__description__:s("",t),__name__:s("",h(t))})},c(o,{"for":s(function(t){return p[t]?p[t]:p[t]=o(String(t))}),keyFor:s(function(t){var e;a(t);for(e in p)if(p[e]===t)return e}),hasInstance:s("",r&&r.hasInstance||o("hasInstance")),isConcatSpreadable:s("",r&&r.isConcatSpreadable||o("isConcatSpreadable")),iterator:s("",r&&r.iterator||o("iterator")),match:s("",r&&r.match||o("match")),replace:s("",r&&r.replace||o("replace")),search:s("",r&&r.search||o("search")),species:s("",r&&r.species||o("species")),split:s("",r&&r.split||o("split")),toPrimitive:s("",r&&r.toPrimitive||o("toPrimitive")),toStringTag:s("",r&&r.toStringTag||o("toStringTag")),unscopables:s("",r&&r.unscopables||o("unscopables"))}),c(i.prototype,{constructor:s(o),toString:s("",function(){return this.__name__})}),c(o.prototype,{toString:s(function(){return"Symbol ("+a(this).__description__+")"}),valueOf:s(function(){return a(this)})}),l(o.prototype,o.toPrimitive,s("",function(){return a(this)})),l(o.prototype,o.toStringTag,s("c","Symbol")),l(i.prototype,o.toPrimitive,s("c",o.prototype[o.toPrimitive])),l(i.prototype,o.toStringTag,s("c",o.prototype[o.toStringTag]))},{"./validate-symbol":60,d:10}],60:[function(t,e,n){"use strict";var r=t("./is-symbol");e.exports=function(t){if(!r(t))throw new TypeError(t+" is not a symbol");return t}},{"./is-symbol":58}],61:[function(t,e,n){"use strict";var r,o,i,s,a,u,c,l=t("d"),f=t("es5-ext/object/valid-callable"),p=Function.prototype.apply,h=Function.prototype.call,d=Object.create,m=Object.defineProperty,y=Object.defineProperties,v=Object.prototype.hasOwnProperty,g={configurable:!0,enumerable:!1,writable:!0};r=function(t,e){var n;return f(e),v.call(this,"__ee__")?n=this.__ee__:(n=g.value=d(null),m(this,"__ee__",g),g.value=null),n[t]?"object"==typeof n[t]?n[t].push(e):n[t]=[n[t],e]:n[t]=e,this},o=function(t,e){var n,o;return f(e),o=this,r.call(this,t,n=function(){i.call(o,t,n),p.call(e,this,arguments)}),n.__eeOnceListener__=e,this},i=function(t,e){var n,r,o,i;if(f(e),!v.call(this,"__ee__"))return this;if(n=this.__ee__,!n[t])return this;if(r=n[t],"object"==typeof r)for(i=0;o=r[i];++i)(o===e||o.__eeOnceListener__===e)&&(2===r.length?n[t]=r[i?0:1]:r.splice(i,1));else(r===e||r.__eeOnceListener__===e)&&delete n[t];return this},s=function(t){var e,n,r,o,i;if(v.call(this,"__ee__")&&(o=this.__ee__[t]))if("object"==typeof o){for(n=arguments.length,i=new Array(n-1),e=1;n>e;++e)i[e-1]=arguments[e];for(o=o.slice(),e=0;r=o[e];++e)p.call(r,this,i)}else switch(arguments.length){case 1:h.call(o,this);break;case 2:h.call(o,this,arguments[1]);break;case 3:h.call(o,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),e=1;n>e;++e)i[e-1]=arguments[e];p.call(o,this,i)}},a={on:r,once:o,off:i,emit:s},u={on:l(r),once:l(o),off:l(i),emit:l(s)},c=y({},u),e.exports=n=function(t){return null==t?d(c):y(Object(t),u)},n.methods=a},{d:10,"es5-ext/object/valid-callable":37}],62:[function(t,e,n){"use strict";function r(t,e){var n=0;if(""!==t&&""!==e&&t.length===e.length)for(var r=0,o=0;r<t.length&&o<e.length;++r,++o)t[r]!=e[o]&&(++n,t[r+1]===e[o]?++r:t[r]===e[o+1]?++o:t[r+1]===e[o+1]&&(++r,++o));return 1===n}function o(){return(navigator.userLanguage||navigator.language).slice(0,2).toLowerCase()}function i(t){var e=t.match(/translate(3d)?\((-?\d+).*?,\s?(-?\d+).*?(,\s?(-?\d+).*?)?\)/i);return e?new v.Point(Number(e[2]),Number(e[3])):new v.Point(0,0)}function s(t,e){if(3!==e.platforms.length)return null;var n=e.platforms.map(function(e){return t.platforms[e]});return n.every(function(t){return 2===t.transfers.length})?n:null}function a(t){if(3!==t.length)throw new Error("must have 3 vertices");var e=t[1].subtract(t[0]),n=t[2].subtract(t[0]),r=f(e,e),o=f(n,n);return new v.Point(n.y*r-e.y*o,e.x*o-n.x*r).divideBy(2*(e.x*n.y-e.y*n.x)).add(t[0])}function u(t){if("dataset"in t)return t.dataset;for(var e=t.attributes,n={},r=0;r<e.length;++r){var o=e[r].name;o.startsWith("data-")&&(n[o.slice(5)]=t.getAttribute(o))}return n}function c(t,e){Object.keys(e).forEach(function(n){return t.setAttribute("data-"+n,e[n])})}function l(t,e){var n=0;setInterval(function(){return document.title=t[++n%t.length]},e)}function f(t,e){return t.x*e.x+t.y*e.y}function p(t,e){return f(t,e)/t.distanceTo(e)}function h(t){return t.reduce(function(t,e){return t.add(e)}).divideBy(t.length)}function d(t,e){function n(e){Object.keys(e).forEach(function(n){var r=e[n];if("string"==typeof r){if(void 0===t.platforms.find(function(t){return t.name===r}))throw new Error("platform "+r+" doesn't exist")}else r.forEach(function(e){if(void 0===t.platforms.find(function(t){return t.name===e}))throw new Error("platform "+e+" doesn't exist")})})}return new Promise(function(r,o){var i=e.crossPlatform;Object.keys(i).forEach(function(e){void 0===t.platforms.find(function(t){return t.name===e})&&o("platform "+e+" doesn't exist");var r=i[e];"forEach"in r?r.forEach(function(t){return n}):n(r)}),Object.keys(e.englishNames).forEach(function(e){void 0===t.platforms.find(function(t){return t.name===e})&&o("platform "+e+" doesn't exist")}),r("hints json seems okay")})}function m(t,e,n){var r=n.spans.map(function(e){return t.spans[e]}),o=[];r.forEach(function(e){return e.routes.forEach(function(e){return o.push(t.routes[e])})});var i=o.map(function(t){return t.line}),s=e[n.name];if(s)if("forEach"in s){for(var a=0;a<s.length;++a)if(Object.keys(s[a]).some(function(t){return i.indexOf(t)>-1}))return a}else if(Object.keys(s).some(function(t){return i.indexOf(t)>-1}))return-1;return null}function y(t,e){var n=document.createElement("a"),r=new Blob([e],{type:"octet/stream"}),o=window.URL.createObjectURL(r);n.href=o,n.download=t,n.click(),window.URL.revokeObjectURL(o)}var v=window.L;n.diffByOne=r,n.getUserLanguage=o,n.parseTransform=i,n.findCircle=s,n.getCircumcenter=a,n.getSVGDataset=u,n.setSVGDataset=c,n.flashTitle=l,n.dot=f,n.angle=p,n.getCenter=h,n.verifyHints=d,n.hintContainsLine=m,n.downloadAsFile=y},{}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
